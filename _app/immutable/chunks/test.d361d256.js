import{s as b,n as i}from"./scheduler.a117fe6f.js";import{S as _,i as w,g as r,s as f,H as x,h as k,A as y,c as h,j as T,E as P,f as e,k as S,a as o}from"./index.5faa0350.js";function C(g){let s,m="Simple script that will assign room number depending on the floor. From bottom left to top right.",c,t,d="<code>[floor number][room number]</code> <br/>Example: fifth room on first floor would have <code>105</code>.",l,p,u,v=`<code class="language-python"><span class="token comment">#!python</span>
<span class="token keyword">import</span> clr
clr<span class="token punctuation">.</span>AddReference<span class="token punctuation">(</span><span class="token string">'ProtoGeometry'</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> Autodesk<span class="token punctuation">.</span>DesignScript<span class="token punctuation">.</span>Geometry <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># The inputs to this node will be stored as a list in the IN variables.</span>
elements <span class="token operator">=</span> IN<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># Assign individual number for each door from left to right  [level]-[nr]</span>
floors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>
    level <span class="token operator">=</span> element<span class="token punctuation">.</span>GetParameterValueByName<span class="token punctuation">(</span><span class="token string">'Level'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> level <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>
        level <span class="token operator">=</span> <span class="token string">'0'</span>
    <span class="token keyword">if</span> floors<span class="token punctuation">.</span>get<span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>

<span class="token keyword">for</span> floor<span class="token punctuation">,</span> elems <span class="token keyword">in</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> nr<span class="token punctuation">,</span> element <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>
            <span class="token builtin">sorted</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>
                   key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> Geometry<span class="token punctuation">.</span>DistanceTo<span class="token punctuation">(</span>
                       x<span class="token punctuation">.</span>BoundingBox<span class="token punctuation">.</span>MinPoint<span class="token punctuation">,</span>
                       Point<span class="token punctuation">.</span>ByCoordinates<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">48000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        element<span class="token punctuation">.</span>SetParameterByName<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;&#123;:02d&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>floor<span class="token punctuation">,</span> nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Assign your output to the OUT variable.</span>
OUT <span class="token operator">=</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`;return{c(){s=r("p"),s.textContent=m,c=f(),t=r("p"),t.innerHTML=d,l=f(),p=r("pre"),u=new x(!1),this.h()},l(n){s=k(n,"P",{"data-svelte-h":!0}),y(s)!=="svelte-x6qilv"&&(s.textContent=m),c=h(n),t=k(n,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1nw1y5"&&(t.innerHTML=d),l=h(n),p=k(n,"PRE",{class:!0});var a=T(p);u=P(a,!1),a.forEach(e),this.h()},h(){u.a=null,S(p,"class","language-python")},m(n,a){o(n,s,a),o(n,c,a),o(n,t,a),o(n,l,a),o(n,p,a),u.m(v,p)},p:i,i,o:i,d(n){n&&(e(s),e(c),e(t),e(l),e(p))}}}const H={title:"test",date:"2022-12-01T00:00:00.000Z",summary:"Revit automatic door swing direction update for spreadsheets.",authors:"Dawid Huczy≈Ñski",tags:["revit","architecture"],sketch:!0};class A extends _{constructor(s){super(),w(this,s,null,C,b,{})}}const E=Object.freeze(Object.defineProperty({__proto__:null,default:A,metadata:H},Symbol.toStringTag,{value:"Module"}));export{E as _};
