import{S as G,i as O,s as R,e as l,t as k,k as P,c as u,a as m,h as d,d as a,m as T,b as F,g as f,J as t,n as B}from"./index-e5ced12e.js";function H(N){let p,b,h,s,r,v,w,g,_,i,x,E,y,e,A=`<code class="language-python"><span class="token comment">#!python</span>
<span class="token keyword">import</span> clr
clr<span class="token punctuation">.</span>AddReference<span class="token punctuation">(</span><span class="token string">'ProtoGeometry'</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> Autodesk<span class="token punctuation">.</span>DesignScript<span class="token punctuation">.</span>Geometry <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># The inputs to this node will be stored as a list in the IN variables.</span>
elements <span class="token operator">=</span> IN<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># Assign individual number for each door from left to right  [level]-[nr]</span>
floors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>
    level <span class="token operator">=</span> element<span class="token punctuation">.</span>GetParameterValueByName<span class="token punctuation">(</span><span class="token string">'Level'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> level <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>
        level <span class="token operator">=</span> <span class="token string">'0'</span>
    <span class="token keyword">if</span> floors<span class="token punctuation">.</span>get<span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>

<span class="token keyword">for</span> floor<span class="token punctuation">,</span> elems <span class="token keyword">in</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> nr<span class="token punctuation">,</span> element <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>
            <span class="token builtin">sorted</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>
                   key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> Geometry<span class="token punctuation">.</span>DistanceTo<span class="token punctuation">(</span>
                       x<span class="token punctuation">.</span>BoundingBox<span class="token punctuation">.</span>MinPoint<span class="token punctuation">,</span>
                       Point<span class="token punctuation">.</span>ByCoordinates<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">48000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        element<span class="token punctuation">.</span>SetParameterByName<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;&#123;:02d&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>floor<span class="token punctuation">,</span> nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Assign your output to the OUT variable.</span>
OUT <span class="token operator">=</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`;return{c(){p=l("p"),b=k("Simple script that will assign room number depending on the floor. From bottom left to top right."),h=P(),s=l("p"),r=l("code"),v=k("[floor number][room number]"),w=P(),g=l("br"),_=k("Example: fifth room on first floor would have "),i=l("code"),x=k("105"),E=k("."),y=P(),e=l("pre"),this.h()},l(n){p=u(n,"P",{});var o=m(p);b=d(o,"Simple script that will assign room number depending on the floor. From bottom left to top right."),o.forEach(a),h=T(n),s=u(n,"P",{});var c=m(s);r=u(c,"CODE",{});var S=m(r);v=d(S,"[floor number][room number]"),S.forEach(a),w=T(c),g=u(c,"BR",{}),_=d(c,"Example: fifth room on first floor would have "),i=u(c,"CODE",{});var D=m(i);x=d(D,"105"),D.forEach(a),E=d(c,"."),c.forEach(a),y=T(n),e=u(n,"PRE",{class:!0});var C=m(e);C.forEach(a),this.h()},h(){F(e,"class","language-python")},m(n,o){f(n,p,o),t(p,b),f(n,h,o),f(n,s,o),t(s,r),t(r,v),t(s,w),t(s,g),t(s,_),t(s,i),t(i,x),t(s,E),f(n,y,o),f(n,e,o),e.innerHTML=A},p:B,i:B,o:B,d(n){n&&a(p),n&&a(h),n&&a(s),n&&a(y),n&&a(e)}}}const L={title:"test",date:"2022-12-01T00:00:00.000Z",summary:"Revit automatic door swing direction update for spreadsheets.",authors:"Dawid Huczy\u0144ski",tags:["revit","architecture"],sketch:!0};class M extends G{constructor(p){super(),O(this,p,null,H,R,{})}}export{M as default,L as metadata};
