import{S as A,i as C,s as R,k as l,q as k,a as P,l as u,m,r as d,h as a,c as S,n as M,b as f,G as t,B as T}from"./index-5cf732b6.js";function j(D){let o,y,h,s,r,v,_,g,w,i,x,E,b,e,G=`<code class="language-python"><span class="token comment">#!python</span>
<span class="token keyword">import</span> clr
clr<span class="token punctuation">.</span>AddReference<span class="token punctuation">(</span><span class="token string">'ProtoGeometry'</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> Autodesk<span class="token punctuation">.</span>DesignScript<span class="token punctuation">.</span>Geometry <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># The inputs to this node will be stored as a list in the IN variables.</span>
elements <span class="token operator">=</span> IN<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># Assign individual number for each door from left to right  [level]-[nr]</span>
floors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>
    level <span class="token operator">=</span> element<span class="token punctuation">.</span>GetParameterValueByName<span class="token punctuation">(</span><span class="token string">'Level'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> level <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>
        level <span class="token operator">=</span> <span class="token string">'0'</span>
    <span class="token keyword">if</span> floors<span class="token punctuation">.</span>get<span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        floors<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span>

<span class="token keyword">for</span> floor<span class="token punctuation">,</span> elems <span class="token keyword">in</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> nr<span class="token punctuation">,</span> element <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>
            <span class="token builtin">sorted</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span>
                   key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> Geometry<span class="token punctuation">.</span>DistanceTo<span class="token punctuation">(</span>
                       x<span class="token punctuation">.</span>BoundingBox<span class="token punctuation">.</span>MinPoint<span class="token punctuation">,</span>
                       Point<span class="token punctuation">.</span>ByCoordinates<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">48000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        element<span class="token punctuation">.</span>SetParameterByName<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;&#123;:02d&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>floor<span class="token punctuation">,</span> nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Assign your output to the OUT variable.</span>
OUT <span class="token operator">=</span> floors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`;return{c(){o=l("p"),y=k("Simple script that will assign room number depending on the floor. From bottom left to top right."),h=P(),s=l("p"),r=l("code"),v=k("[floor number][room number]"),_=P(),g=l("br"),w=k("Example: fifth room on first floor would have "),i=l("code"),x=k("105"),E=k("."),b=P(),e=l("pre"),this.h()},l(n){o=u(n,"P",{});var p=m(o);y=d(p,"Simple script that will assign room number depending on the floor. From bottom left to top right."),p.forEach(a),h=S(n),s=u(n,"P",{});var c=m(s);r=u(c,"CODE",{});var B=m(r);v=d(B,"[floor number][room number]"),B.forEach(a),_=S(c),g=u(c,"BR",{}),w=d(c,"Example: fifth room on first floor would have "),i=u(c,"CODE",{});var O=m(i);x=d(O,"105"),O.forEach(a),E=d(c,"."),c.forEach(a),b=S(n),e=u(n,"PRE",{class:!0});var N=m(e);N.forEach(a),this.h()},h(){M(e,"class","language-python")},m(n,p){f(n,o,p),t(o,y),f(n,h,p),f(n,s,p),t(s,r),t(r,v),t(s,_),t(s,g),t(s,w),t(s,i),t(i,x),t(s,E),f(n,b,p),f(n,e,p),e.innerHTML=G},p:T,i:T,o:T,d(n){n&&a(o),n&&a(h),n&&a(s),n&&a(b),n&&a(e)}}}const q={title:"test",date:"2022-12-01T00:00:00.000Z",summary:"Revit automatic door swing direction update for spreadsheets.",authors:"Dawid Huczy≈Ñski",tags:["revit","architecture"],sketch:!0};class z extends A{constructor(o){super(),C(this,o,null,j,R,{})}}const H=Object.freeze(Object.defineProperty({__proto__:null,default:z,metadata:q},Symbol.toStringTag,{value:"Module"}));export{H as _};
